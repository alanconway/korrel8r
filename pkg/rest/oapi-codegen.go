// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Constraint Constrains the objects that will be included in search results.
type Constraint struct {
	// End End of time interval.
	End *time.Time `json:"end,omitempty"`

	// Limit Limit number of objects returned per query.
	Limit *int `json:"limit,omitempty"`

	// Start Start of time interval.
	Start *time.Time `json:"start,omitempty"`

	// Timeout Timeout per request, h/m/s/ms/ns format
	Timeout *time.Duration `json:"timeout,omitempty"`
}

// Domain Domain configuration information.
type Domain struct {
	// Name Name of the domain.
	Name string `json:"name"`

	// Stores Stores configured for the domain.
	Stores []Store `json:"stores,omitempty"`
}

// Edge Directed edge in the result graph, from Start to Goal classes.
type Edge struct {
	// Goal Class name of the goal node.
	Goal string `json:"goal"`

	// Rules Set of rules followed along this edge.
	Rules []Rule `json:"rules,omitempty"`

	// Start Class name of the start node.
	Start string `json:"start"`
}

// Error Error result containing an error message.
type Error struct {
	// Error Error message.
	Error string `json:"error"`
}

// Goals Starting point for a goals search.
type Goals struct {
	// Goals Goal classes for correlation.
	Goals []string `json:"goals"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Graph Graph resulting from a correlation search.
type Graph struct {
	// Edges List of graph edges.
	Edges []Edge `json:"edges,omitempty"`

	// Nodes List of graph nodes.
	Nodes []Node `json:"nodes,omitempty"`
}

// Neighbours Starting point for a neighbours search.
type Neighbours struct {
	// Depth Max depth of neighbours graph.
	Depth int `json:"depth"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Node Node in the result graph, contains results for a single class.
type Node struct {
	// Class Full class name
	Class string `json:"class"`

	// Count Number of results for this class, after de-duplication.
	Count *int `json:"count,omitempty"`

	// Queries Queries yielding results for this class.
	Queries []QueryCount `json:"queries,omitempty"`
}

// QueryCount Query with number of results.
type QueryCount struct {
	// Count Number of results, omitted if the query was not executed.
	Count *int `json:"count,omitempty"`

	// Query Query for correlation data.
	Query string `json:"query"`
}

// Rule Rule is a correlation rule with a list of queries and results counts found during navigation.
type Rule struct {
	// Name Name is an optional descriptive name.
	Name string `json:"name"`

	// Queries Queries generated while following this rule.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Start Start identifies a set of starting objects for correlation.
type Start struct {
	// Class Class of starting objects and queries.
	Class string `json:"class,omitempty"`

	// Constraint Constrains the objects that will be included in search results.
	Constraint *Constraint `json:"constraint,omitempty"`

	// Objects Objects serialized as JSON.
	Objects []json.RawMessage `json:"objects,omitempty"`

	// Queries Queries for starting objects
	Queries []string `json:"queries,omitempty"`
}

// Store Store is a map of name:value attributes used to connect to a store.
type Store map[string]string

// SetConfigParams defines parameters for SetConfig.
type SetConfigParams struct {
	// Verbose Verbose setting for logging.
	Verbose *int `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// GraphGoalsParams defines parameters for GraphGoals.
type GraphGoalsParams struct {
	// Rules include rules in graph edges
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// GraphNeighboursParams defines parameters for GraphNeighbours.
type GraphNeighboursParams struct {
	// Rules include rules in graph edges
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// QueryParams defines parameters for Query.
type QueryParams struct {
	// Query query string
	Query string `form:"query" json:"query"`
}

// GraphGoalsJSONRequestBody defines body for GraphGoals for application/json ContentType.
type GraphGoalsJSONRequestBody = Goals

// GraphNeighboursJSONRequestBody defines body for GraphNeighbours for application/json ContentType.
type GraphNeighboursJSONRequestBody = Neighbours

// ListGoalsJSONRequestBody defines body for ListGoals for application/json ContentType.
type ListGoalsJSONRequestBody = Goals

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change configuration settings at runtime.
	// (PUT /config)
	SetConfig(c *gin.Context, params SetConfigParams)
	// Get the list of correlation domains.
	// (GET /domains)
	ListDomains(c *gin.Context)
	// Create a correlation graph from start objects to goal queries.
	// (POST /graphs/goals)
	GraphGoals(c *gin.Context, params GraphGoalsParams)
	// Create a neighbourhood graph around a start object to a given depth.
	// (POST /graphs/neighbours)
	GraphNeighbours(c *gin.Context, params GraphNeighboursParams)
	// Create a list of goal nodes related to a starting point.
	// (POST /lists/goals)
	ListGoals(c *gin.Context)
	// Execute a query, returns a list of JSON objects.
	// (GET /objects)
	Query(c *gin.Context, params QueryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetConfigParams

	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", c.Request.URL.Query(), &params.Verbose)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter verbose: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetConfig(c, params)
}

// ListDomains operation middleware
func (siw *ServerInterfaceWrapper) ListDomains(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDomains(c)
}

// GraphGoals operation middleware
func (siw *ServerInterfaceWrapper) GraphGoals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphGoalsParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphGoals(c, params)
}

// GraphNeighbours operation middleware
func (siw *ServerInterfaceWrapper) GraphNeighbours(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphNeighboursParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphNeighbours(c, params)
}

// ListGoals operation middleware
func (siw *ServerInterfaceWrapper) ListGoals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGoals(c)
}

// Query operation middleware
func (siw *ServerInterfaceWrapper) Query(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/config", wrapper.SetConfig)
	router.GET(options.BaseURL+"/domains", wrapper.ListDomains)
	router.POST(options.BaseURL+"/graphs/goals", wrapper.GraphGoals)
	router.POST(options.BaseURL+"/graphs/neighbours", wrapper.GraphNeighbours)
	router.POST(options.BaseURL+"/lists/goals", wrapper.ListGoals)
	router.GET(options.BaseURL+"/objects", wrapper.Query)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
