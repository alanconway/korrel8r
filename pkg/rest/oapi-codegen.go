// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Constraint Constrains the objects that will be included in search results.
type Constraint struct {
	// End End of time interval.
	End *time.Time `json:"end,omitempty"`

	// Limit Limit number of objects returned per query.
	Limit *int `json:"limit,omitempty"`

	// Start Start of time interval.
	Start *time.Time `json:"start,omitempty"`

	// Timeout Timeout per request, h/m/s/ms/ns format
	Timeout *time.Duration `json:"timeout,omitempty"`
}

// Domain Domain configuration information.
type Domain struct {
	// Name Name of the domain.
	Name string `json:"name"`

	// Stores Stores configured for the domain.
	Stores []Store `json:"stores,omitempty"`
}

// Edge Directed edge in the result graph, from Start to Goal classes.
type Edge struct {
	// Goal Class name of the goal node.
	Goal string `json:"goal"`

	// Rules Set of rules followed along this edge.
	Rules []Rule `json:"rules,omitempty"`

	// Start Class name of the start node.
	Start string `json:"start"`
}

// Error Error result containing an error message.
type Error struct {
	// Error Error message.
	Error string `json:"error"`
}

// Goals Starting point for a goals search.
type Goals struct {
	// Goals Goal classes for correlation.
	Goals []string `json:"goals"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Graph Graph resulting from a correlation search.
type Graph struct {
	// Edges List of graph edges.
	Edges []Edge `json:"edges,omitempty"`

	// Nodes List of graph nodes.
	Nodes []Node `json:"nodes,omitempty"`
}

// Neighbours Starting point for a neighbours search.
type Neighbours struct {
	// Depth Max depth of neighbours graph.
	Depth int `json:"depth"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Node Node in the result graph, contains results for a single class.
type Node struct {
	// Class Full class name
	Class string `json:"class"`

	// Count Number of results for this class, after de-duplication.
	Count *int `json:"count,omitempty"`

	// Queries Queries yielding results for this class.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Query A query string consists of three parts separated by ':', 'DOMAIN:CLASS:SELECTOR'. DOMAIN is the name of a domain. CLASS is the name of a class in the domain. SELECTOR is a domain-specific query string to retrieve selected objects.
type Query = string

// QueryCount Query with number of results.
type QueryCount struct {
	// Count Number of results, omitted if the query was not executed.
	Count *int `json:"count,omitempty"`

	// Query A query string consists of three parts separated by ':', 'DOMAIN:CLASS:SELECTOR'. DOMAIN is the name of a domain. CLASS is the name of a class in the domain. SELECTOR is a domain-specific query string to retrieve selected objects.
	Query Query `json:"query"`
}

// Rule Rule is a correlation rule with a list of queries and results counts found during navigation.
type Rule struct {
	// Name Name is an optional descriptive name.
	Name string `json:"name"`

	// Queries Queries generated while following this rule.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Start Start identifies a set of starting objects for correlation.
type Start struct {
	// Class Class of starting objects and queries.
	Class string `json:"class,omitempty"`

	// Constraint Constrains the objects that will be included in search results.
	Constraint *Constraint `json:"constraint,omitempty"`

	// Objects Objects serialized as JSON.
	Objects []json.RawMessage `json:"objects,omitempty"`

	// Queries Queries for starting objects
	Queries []string `json:"queries,omitempty"`
}

// Store Store is a map of name:value attributes used to connect to a store.
type Store map[string]string

// SetConfigParams defines parameters for SetConfig.
type SetConfigParams struct {
	// Verbose Verbose setting for logging.
	Verbose *int `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// GraphGoalsParams defines parameters for GraphGoals.
type GraphGoalsParams struct {
	// Rules include rules in graph edges
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// GraphNeighboursParams defines parameters for GraphNeighbours.
type GraphNeighboursParams struct {
	// Rules include rules in graph edges
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// QueryParams defines parameters for Query.
type QueryParams struct {
	// Query Query string.
	Query Query `form:"query" json:"query"`
}

// GraphGoalsJSONRequestBody defines body for GraphGoals for application/json ContentType.
type GraphGoalsJSONRequestBody = Goals

// GraphNeighboursJSONRequestBody defines body for GraphNeighbours for application/json ContentType.
type GraphNeighboursJSONRequestBody = Neighbours

// ListGoalsJSONRequestBody defines body for ListGoals for application/json ContentType.
type ListGoalsJSONRequestBody = Goals

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change configuration settings at runtime.
	// (PUT /config)
	SetConfig(c *gin.Context, params SetConfigParams)
	// Get the list of correlation domains.
	// (GET /domains)
	ListDomains(c *gin.Context)
	// Create a correlation graph from start objects to goal queries.
	// (POST /graphs/goals)
	GraphGoals(c *gin.Context, params GraphGoalsParams)
	// Create a neighbourhood graph around a start object to a given depth.
	// (POST /graphs/neighbours)
	GraphNeighbours(c *gin.Context, params GraphNeighboursParams)
	// Create a list of goal nodes related to a starting point.
	// (POST /lists/goals)
	ListGoals(c *gin.Context)
	// Execute a query, returns a list of JSON objects.
	// (GET /objects)
	Query(c *gin.Context, params QueryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetConfigParams

	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", c.Request.URL.Query(), &params.Verbose)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter verbose: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetConfig(c, params)
}

// ListDomains operation middleware
func (siw *ServerInterfaceWrapper) ListDomains(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDomains(c)
}

// GraphGoals operation middleware
func (siw *ServerInterfaceWrapper) GraphGoals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphGoalsParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphGoals(c, params)
}

// GraphNeighbours operation middleware
func (siw *ServerInterfaceWrapper) GraphNeighbours(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphNeighboursParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphNeighbours(c, params)
}

// ListGoals operation middleware
func (siw *ServerInterfaceWrapper) ListGoals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGoals(c)
}

// Query operation middleware
func (siw *ServerInterfaceWrapper) Query(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/config", wrapper.SetConfig)
	router.GET(options.BaseURL+"/domains", wrapper.ListDomains)
	router.POST(options.BaseURL+"/graphs/goals", wrapper.GraphGoals)
	router.POST(options.BaseURL+"/graphs/neighbours", wrapper.GraphNeighbours)
	router.POST(options.BaseURL+"/lists/goals", wrapper.ListGoals)
	router.GET(options.BaseURL+"/objects", wrapper.Query)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA///A2ieT7ygAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
