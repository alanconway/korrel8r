// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/korrel8r/korrel8r/pkg/korrel8r"
	"github.com/oapi-codegen/runtime"
)

// Class Names a class of objects with the same schema or structure. It has 2 parts DOMAIN:CLASS DOMAIN: name of a domain. CLASS: name of a class in the domain.
type Class = string

// Constraint Constrains the objects that will be included in search results.
type Constraint = korrel8r.Constraint

// Domain Domain configuration information.
type Domain struct {
	// Name Name of the domain.
	Name string `json:"name"`

	// Stores Stores configured for the domain.
	Stores []Store `json:"stores,omitempty"`
}

// Duration The duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are: ns, us (or Âµs), ms, s, m, h.
type Duration = time.Duration

// Edge Directed edge in the result graph, from Start to Goal classes.
type Edge struct {
	// Goal Class name of the goal node.
	Goal Class `json:"goal"`

	// Rules Set of rules followed along this edge.
	Rules []Rule `json:"rules,omitempty"`

	// Start Class name of the start node.
	Start Class `json:"start"`
}

// Error Error result containing an error message.
type Error struct {
	// Error Error message.
	Error string `json:"error"`
}

// Goals Starting point for a goals search.
type Goals struct {
	// Goals Goal classes for correlation.
	Goals []Class `json:"goals"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Graph Graph resulting from a correlation search.
type Graph struct {
	// Edges List of graph edges.
	Edges []Edge `json:"edges,omitempty"`

	// Nodes List of graph nodes.
	Nodes []Node `json:"nodes,omitempty"`
}

// Neighbours Starting point for a neighbours search.
type Neighbours struct {
	// Depth Max depth of neighbours graph.
	Depth int `json:"depth"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Node Node in the result graph, contains results for a single class.
type Node struct {
	// Class Full class name
	Class string `json:"class"`

	// Count Number of results for this class, after de-duplication.
	Count *int `json:"count,omitempty"`

	// Queries Queries yielding results for this class.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Query Represents a request to retrieve data for a particular Class. It has 3 parts DOMAIN:CLASS:SELECTOR DOMAIN: name of a domain. CLASS: name of a class in the domain. SELECTOR: domain-specific query string to retrieve selected objects.
type Query = string

// QueryCount Query with number of results.
type QueryCount struct {
	// Count Number of results, omitted if the query was not executed.
	Count *int `json:"count,omitempty"`

	// Query Query for correlation data.
	Query Query `json:"query"`
}

// Rule Rule is a correlation rule with a list of queries and results counts found during navigation.
type Rule struct {
	// Name Name is an optional descriptive name.
	Name string `json:"name"`

	// Queries Queries generated while following this rule.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Start Start identifies a set of starting objects for correlation.
type Start struct {
	// Class Class of starting objects and queries.
	Class Class `json:"class,omitempty"`

	// Constraint Constrain the objects that will be returned.
	Constraint *Constraint `json:"constraint,omitempty"`

	// Objects Objects serialized as JSON.
	Objects []json.RawMessage `json:"objects,omitempty"`

	// Queries Queries for starting objects
	Queries []Query `json:"queries,omitempty"`
}

// Store Store is a map string keys and values used to connect to a store.
type Store map[string]string

// SetConfigParams defines parameters for SetConfig.
type SetConfigParams struct {
	// Verbose Verbose setting for logging.
	Verbose *int `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// GraphGoalsParams defines parameters for GraphGoals.
type GraphGoalsParams struct {
	// Rules Include rules in graph edges.
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// GraphNeighboursParams defines parameters for GraphNeighbours.
type GraphNeighboursParams struct {
	// Rules Include rules in graph edges.
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// QueryParams defines parameters for Query.
type QueryParams struct {
	// Query Query string.
	Query Query `form:"query" json:"query"`
}

// GraphGoalsJSONRequestBody defines body for GraphGoals for application/json ContentType.
type GraphGoalsJSONRequestBody = Goals

// GraphNeighboursJSONRequestBody defines body for GraphNeighbours for application/json ContentType.
type GraphNeighboursJSONRequestBody = Neighbours

// ListGoalsJSONRequestBody defines body for ListGoals for application/json ContentType.
type ListGoalsJSONRequestBody = Goals

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change configuration settings at runtime.
	// (PUT /config)
	SetConfig(c *gin.Context, params SetConfigParams)
	// Get the list of correlation domains.
	// (GET /domains)
	ListDomains(c *gin.Context)
	// Create a correlation graph from start objects to goal queries.
	// (POST /graphs/goals)
	GraphGoals(c *gin.Context, params GraphGoalsParams)
	// Create a neighbourhood graph around a start object to a given depth.
	// (POST /graphs/neighbours)
	GraphNeighbours(c *gin.Context, params GraphNeighboursParams)
	// Create a list of goal nodes related to a starting point.
	// (POST /lists/goals)
	ListGoals(c *gin.Context)
	// Execute a query, returns a list of JSON objects.
	// (GET /objects)
	Query(c *gin.Context, params QueryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetConfigParams

	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", c.Request.URL.Query(), &params.Verbose)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter verbose: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetConfig(c, params)
}

// ListDomains operation middleware
func (siw *ServerInterfaceWrapper) ListDomains(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDomains(c)
}

// GraphGoals operation middleware
func (siw *ServerInterfaceWrapper) GraphGoals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphGoalsParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphGoals(c, params)
}

// GraphNeighbours operation middleware
func (siw *ServerInterfaceWrapper) GraphNeighbours(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphNeighboursParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphNeighbours(c, params)
}

// ListGoals operation middleware
func (siw *ServerInterfaceWrapper) ListGoals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGoals(c)
}

// Query operation middleware
func (siw *ServerInterfaceWrapper) Query(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/config", wrapper.SetConfig)
	router.GET(options.BaseURL+"/domains", wrapper.ListDomains)
	router.POST(options.BaseURL+"/graphs/goals", wrapper.GraphGoals)
	router.POST(options.BaseURL+"/graphs/neighbours", wrapper.GraphNeighbours)
	router.POST(options.BaseURL+"/lists/goals", wrapper.ListGoals)
	router.GET(options.BaseURL+"/objects", wrapper.Query)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+f73uX8CgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
